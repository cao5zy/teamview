using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Pointslog class.
	/// </summary>
    [Serializable]
	public partial class PointslogCollection : ActiveList<Pointslog, PointslogCollection>
	{	   
		public PointslogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PointslogCollection</returns>
		public PointslogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Pointslog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the pointslog table.
	/// </summary>
	[Serializable]
	public partial class Pointslog : ActiveRecord<Pointslog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Pointslog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Pointslog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Pointslog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Pointslog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("pointslog", TableType.Table, DataService.GetInstance("BugInfoProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPointslogid = new TableSchema.TableColumn(schema);
				colvarPointslogid.ColumnName = "pointslogid";
				colvarPointslogid.DataType = DbType.Int64;
				colvarPointslogid.MaxLength = 0;
				colvarPointslogid.AutoIncrement = true;
				colvarPointslogid.IsNullable = false;
				colvarPointslogid.IsPrimaryKey = true;
				colvarPointslogid.IsForeignKey = true;
				colvarPointslogid.IsReadOnly = false;
				colvarPointslogid.DefaultSetting = @"";
				
					colvarPointslogid.ForeignKeyTableName = "pointslog";
				schema.Columns.Add(colvarPointslogid);
				
				TableSchema.TableColumn colvarBugnum = new TableSchema.TableColumn(schema);
				colvarBugnum.ColumnName = "bugnum";
				colvarBugnum.DataType = DbType.AnsiString;
				colvarBugnum.MaxLength = 500;
				colvarBugnum.AutoIncrement = false;
				colvarBugnum.IsNullable = false;
				colvarBugnum.IsPrimaryKey = false;
				colvarBugnum.IsForeignKey = false;
				colvarBugnum.IsReadOnly = false;
				colvarBugnum.DefaultSetting = @"";
				colvarBugnum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBugnum);
				
				TableSchema.TableColumn colvarLog = new TableSchema.TableColumn(schema);
				colvarLog.ColumnName = "log";
				colvarLog.DataType = DbType.AnsiString;
				colvarLog.MaxLength = 100;
				colvarLog.AutoIncrement = false;
				colvarLog.IsNullable = false;
				colvarLog.IsPrimaryKey = false;
				colvarLog.IsForeignKey = false;
				colvarLog.IsReadOnly = false;
				colvarLog.DefaultSetting = @"";
				colvarLog.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLog);
				
				TableSchema.TableColumn colvarCreatedtime = new TableSchema.TableColumn(schema);
				colvarCreatedtime.ColumnName = "createdtime";
				colvarCreatedtime.DataType = DbType.DateTime;
				colvarCreatedtime.MaxLength = 0;
				colvarCreatedtime.AutoIncrement = false;
				colvarCreatedtime.IsNullable = false;
				colvarCreatedtime.IsPrimaryKey = false;
				colvarCreatedtime.IsForeignKey = false;
				colvarCreatedtime.IsReadOnly = false;
				colvarCreatedtime.DefaultSetting = @"";
				colvarCreatedtime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedtime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["BugInfoProvider"].AddSchema("pointslog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Pointslogid")]
		[Bindable(true)]
		public long Pointslogid 
		{
			get { return GetColumnValue<long>(Columns.Pointslogid); }
			set { SetColumnValue(Columns.Pointslogid, value); }
		}
		  
		[XmlAttribute("Bugnum")]
		[Bindable(true)]
		public string Bugnum 
		{
			get { return GetColumnValue<string>(Columns.Bugnum); }
			set { SetColumnValue(Columns.Bugnum, value); }
		}
		  
		[XmlAttribute("Log")]
		[Bindable(true)]
		public string Log 
		{
			get { return GetColumnValue<string>(Columns.Log); }
			set { SetColumnValue(Columns.Log, value); }
		}
		  
		[XmlAttribute("Createdtime")]
		[Bindable(true)]
		public DateTime Createdtime 
		{
			get { return GetColumnValue<DateTime>(Columns.Createdtime); }
			set { SetColumnValue(Columns.Createdtime, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public DAL.PointslogCollection ChildPointslogRecords()
		{
			return new DAL.PointslogCollection().Where(Pointslog.Columns.Pointslogid, Pointslogid).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Pointslog ActiveRecord object related to this Pointslog
		/// 
		/// </summary>
		public DAL.Pointslog ParentPointslog
		{
			get { return DAL.Pointslog.FetchByID(this.Pointslogid); }
			set { SetColumnValue("pointslogid", value.Pointslogid); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBugnum,string varLog,DateTime varCreatedtime)
		{
			Pointslog item = new Pointslog();
			
			item.Bugnum = varBugnum;
			
			item.Log = varLog;
			
			item.Createdtime = varCreatedtime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varPointslogid,string varBugnum,string varLog,DateTime varCreatedtime)
		{
			Pointslog item = new Pointslog();
			
				item.Pointslogid = varPointslogid;
			
				item.Bugnum = varBugnum;
			
				item.Log = varLog;
			
				item.Createdtime = varCreatedtime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PointslogidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BugnumColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LogColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedtimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Pointslogid = @"pointslogid";
			 public static string Bugnum = @"bugnum";
			 public static string Log = @"log";
			 public static string Createdtime = @"createdtime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
